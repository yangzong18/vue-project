{
    "success": true,
    "data": [
        {
            "id": "5cbfd9aca86ae80ce64b3175",
            "author_id": "4f447c2f0a8abae26e01b27d",
            "tab": "share",
            "content": "<div class=\"markdown-text\"><h2>前言</h2>\n<p>时隔一年，Node.js 12 如约而至，正式发布第一个 <a href=\"https://github.com/nodejs/Release\">Current</a> 版本。</p>\n<p>该版本带来了诸如：</p>\n<ul>\n<li>V8 更新带来好多不错的特性。</li>\n<li>HTTP 解析速度提升。</li>\n<li>启动速度大幅提升。</li>\n<li>更好的诊断报告和堆分析工具。</li>\n<li>ESM 模块更新。</li>\n</ul>\n<p>原文地址：<a href=\"https://medium.com/@nodejs/introducing-node-js-12-76c41a1b3f3f\">https://medium.com/@nodejs/introducing-node-js-12-76c41a1b3f3f</a>\n语雀地址：<a href=\"https://www.yuque.com/egg/nodejs/nodejs-12\">https://www.yuque.com/egg/nodejs/nodejs-12</a></p>\n<h2>LTS vs Current</h2>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/84182/1556074709431-35af45b8-ec7a-4a81-83d8-155eb519f04a.png#align=left&amp;display=inline&amp;height=389&amp;name=image.png&amp;originHeight=500&amp;originWidth=960&amp;size=58313&amp;status=done&amp;width=746\" alt=\"image.png\"></p>\n<p>如果你不了解 Node.js 的  Long Term Support 发布策略的话，一定要看看 <a href=\"https://github.com/nodejs/Release\">https://github.com/nodejs/Release</a> 。</p>\n<p>就目前而言，Node.js 6.x 和 8.x 将在 2019 年末结束 LTS 的支持，大家尽快升级到 10.x 吧。</p>\n<h2>快速体验</h2>\n<pre class=\"prettyprint language-bash\"><code>$ nvs add node&#x2F;12\n$ nvs use 12\n$ node -v\nv12.0.0\n</code></pre><p>具体参考这篇文章：<a href=\"https://zhuanlan.zhihu.com/p/63403762\">科普文：使用 nvs 管理本地 Node.js 版本</a></p>\n<h2>V8 更新到 7.4</h2>\n<blockquote>\n<p>大部分情况下，我们不用去考虑性能问题，坐等 V8 版本更新就好了。（大雾）</p>\n</blockquote>\n<p>本次版本更新，也带来了好几个不错的特性：</p>\n<ul>\n<li><a href=\"https://v8.dev/blog/v8-release-72#async-stack-traces\">异步堆栈跟踪</a></li>\n<li><a href=\"https://v8.dev/blog/v8-release-74#faster-calls-with-arguments-mismatch\">参数调用不匹配时的调用速度优化</a></li>\n<li><a href=\"https://v8.dev/blog/v8-release-73#faster-await\">更快的 await</a></li>\n<li><a href=\"https://v8.dev/blog/v8-release-72#javascript-parsing\">更快的 JavaScript 解析速度</a></li>\n</ul>\n<p><strong>同时，跑了下我们 Egg 的一些内部测试，发现序列化有 10~20% 的性能提升，恐怖如斯！</strong></p>\n<p>另，奇丑无比的 <a href=\"https://github.com/tc39/proposal-class-fields\">Private Class Fields</a> 也能用了：</p>\n<pre class=\"prettyprint language-javascript\"><code>class IncreasingCounter {\n  #count = 0;\n  \n  get value() {\n    console.log(&#x27;Getting the current value!&#x27;);\n    return this.#count;\n  }\n  increment() {\n    this.#count++;\n  }\n}\n</code></pre><h2>HTTP 解析速度提升</h2>\n<p>默认的 HTTP 解析器切换为 <a href=\"https://github.com/nodejs/llhttp\">llhttp</a> ，性能提升恐怖如斯：</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/84182/1556072499637-686bb0e3-c75c-424c-851f-ad88aff183a2.png#align=left&amp;display=inline&amp;height=231&amp;name=image.png&amp;originHeight=404&amp;originWidth=1302&amp;size=88775&amp;status=done&amp;width=746\" alt=\"image.png\"></p>\n<blockquote>\n<p>点评：恐怖如斯。</p>\n</blockquote>\n<h2>启动速度提升</h2>\n<p>通过 <a href=\"https://v8.dev/blog/code-caching\">v8 code cache</a> 的支持，<a href=\"https://github.com/nodejs/node/pull/27161\">在构建时提前为内置库生成代码缓存</a>，从而提升 30% 的启动耗时。\n同时，通过<a href=\"https://github.com/nodejs/node/pull/24950\">重用主进程缓存</a>，Workers Threads 的启动速度提升了 60% 。</p>\n<blockquote>\n<p>点评：恐怖如斯。</p>\n</blockquote>\n<h2>Workers Threads</h2>\n<p>在 10.x 已经引入的 <a href=\"https://nodejs.org/api/worker_threads.html\">Workers Threads</a> 特性，在 12.x 里面默认启用，无需使用 <code>--experimental-worker</code> 开启。同时基于上一条的介绍，启动的速度也得到大幅提升。</p>\n<p>相关介绍：<a href=\"https://medium.com/@Trott/using-worker-threads-in-node-js-80494136dbb6\">https://medium.com/@Trott/using-worker-threads-in-node-js-80494136dbb6</a></p>\n<h2>诊断报告</h2>\n<p>提供了新的实验性功能『诊断报告』，一个非常有用的特性。\n可用于帮助分析诸如：崩溃，性能问题，内存泄漏，高 CPU 占用等等问题。详见 <a href=\"https://medium.com/the-node-js-collection/easily-identify-problems-in-node-js-applications-with-diagnostic-report-dc82370d8029\">这篇文章</a>。</p>\n<blockquote>\n<p>点评：这也是 <a href=\"https://www.aliyun.com/product/nodejs\">AliNode</a> 之前的一个卖点之一。</p>\n</blockquote>\n<h2>Heap Dump</h2>\n<p>以前我们分析问题的时候，需要手动安装对应的类库或者使用 AliNode。</p>\n<p>在 12.x 里面内置了该功能，详见：</p>\n<ul>\n<li><a href=\"https://github.com/nodejs/node/pull/27133\">https://github.com/nodejs/node/pull/27133</a></li>\n<li><a href=\"https://github.com/nodejs/node/pull/26501\">https://github.com/nodejs/node/pull/26501</a></li>\n</ul>\n<blockquote>\n<p>点评：又一个 <a href=\"https://www.aliyun.com/product/nodejs\">AliNode</a> 的功能被内置了。但其实影响不大，AliNode 的核心在于分析平台，这块的采集能力，本来他们就打算开源回馈出去的。</p>\n</blockquote>\n<p>同时，由于上述提到的 V8 升级，现在可以按照可用内存动态调整堆大小了。</p>\n<h2>ESM 模块方案更新</h2>\n<p>ES6 模块仍然还在实验阶段，不过有了新的方式，具体参见<a href=\"https://medium.com/@nodejs/announcing-a-new-experimental-modules-1be8d2d6c2ff\">这篇文章</a>。</p>\n<blockquote>\n<p>点评：让子弹再飞一会，该特性真的不是痛点，不急。</p>\n</blockquote>\n<h2>其他更新</h2>\n<ul>\n<li>更好的原生模块支持，<a href=\"https://nodejs.org/api/n-api.html#n_api_n_api\">N-API</a> 升级为版本 4，并 backport 到 Node.js 8.x 和 10.x。详细参见<a href=\"https://medium.com/the-node-js-collection/new-features-bring-native-add-ons-close-to-being-on-par-with-js-modules-cd4f9b8e4b4\">这篇文章</a>。</li>\n<li>TLS 升级为 1.3， <a href=\"https://developer.ibm.com/blogs/openssl-111-has-landed-in-nodejs-master-and-why-its-important-for-nodejs-lts-releases/\">增强安全功能</a>。</li>\n<li>随着 C++ 编译器的更新，现在要求 <code>GCC 6</code> 和 <code>glibc 2.17</code> ，对应的操作系统 Win7 和 macOS 10，详细参见<a href=\"https://github.com/nodejs/node/blob/v12.x/BUILDING.md#platform-list\">这篇文章</a>。</li>\n</ul>\n<p>不过目前 node-gyp 的一些原生模块会编译失败：</p>\n<pre class=\"prettyprint language-bash\"><code>nunjucks@3.2.0 › chokidar@2.1.5 › fsevents@^1.2.7 optional error: Error: Run &quot;sh -c node install&quot; error, exit code 1\n    at ChildProcess.&lt;anonymous&gt; (&#x2F;Users&#x2F;tz&#x2F;.npm-global&#x2F;lib&#x2F;node_modules&#x2F;tnpm&#x2F;node_modules&#x2F;_runscript@1.3.0@runscript&#x2F;index.js:74:21)\n    at ChildProcess.emit (events.js:196:13)\n    at maybeClose (internal&#x2F;child_process.js:1000:16)\n    at Process.ChildProcess._handle.onexit (internal&#x2F;child_process.js:267:5)\n</code></pre></div>",
            "title": "Node 12 值得关注的新特性",
            "last_reply_at": "2020-01-07T03:39:20.630Z",
            "good": false,
            "top": true,
            "reply_count": 86,
            "visit_count": 288817,
            "create_at": "2019-04-24T03:36:12.582Z",
            "author": {
                "loginname": "atian25",
                "avatar_url": "https://avatars2.githubusercontent.com/u/227713?v=4&s=120"
            }
        },
        {
            "id": "5e0a0992ba8f6d46c4edfeb1",
            "author_id": "5d9c9150865a9844a301a09e",
            "tab": "share",
            "content": "<div class=\"markdown-text\"><p><img src=\"https://gw.alipayobjects.com/mdn/rms_4b03c4/afts/img/A*vsTMTp3KT94AAAAAAAAAAABkARQnAQ\" alt=\"SEE Conf\"></p>\n<p><a href=\"https://seeconf.antfin.com/\">蚂蚁金服体验科技大会</a>（SEE Conf），是由蚂蚁金服体验科技举办的，集专业分享、产品展台、Workshop 等内容于一身的科技盛筵。SEE 是 Seeking Experience &amp; Engineering 的缩写，意为探索用户体验与工程实践。我们希望通过 SEE Conf, 与业界同行一起分享交流体验科技的当前进展，探讨切磋体验科技的未来发展，共同努力促进体验设计与技术的开放，让生态繁荣共赢。</p>\n<p>SEE Conf 是个年轻、向往美好的「少年」，它的前两届分别于 2018、2019 年在蚂蚁金服的 Z 空间大楼顺利举办，今年，它迎来了第三个年头。</p>\n<p>第三届 SEE Conf 将于 1 月 4 日（本周六）在杭州西湖文体中心举办，会议时长为一天，上午主会场，下午将设置 <strong>技术</strong> 与 <strong>设计</strong> 两个分会场。</p>\n<p>现在，请跟随我一起了解一下本次都有哪些看点吧！</p>\n<h1>重磅大咖</h1>\n<h2>何人可</h2>\n<p><img src=\"https://gw.alipayobjects.com/mdn/rms_4b03c4/afts/img/A*tGL8R4kHGmEAAAAAAAAAAABkARQnAQ\" alt=\"何人可\"></p>\n<p>何教授是湖南大学设计艺术学院院长、博士生导师，教育部工业设计教学指导分委员会主任，国务院学位委员会设计学学科评议组成员，中国工业设计协会特邀副会长，红点、IF、Gmark、红星等国际设计大赛评委会主席或委员。</p>\n<p>他曾说过「<a href=\"https://link.zhihu.com/?target=http%3A//baijiahao.baidu.com/s%3Fid%3D1604355682396162224%26wfr%3Dspider%26for%3Dpc\">为人服务是所有设计师的出发点</a>」，相信设计能为人创造美好的生活。</p>\n<p>这一次，他将为我们带来「<strong>基于地域文化的设计创新</strong>」主题分享，以新通道设计与社会创新项目为例，介绍湖南大学设计艺术学院十年来在中国少数民族地区针对非物质文化遗产的数字化、当代化、国际化和商品化所作的研究及设计工作，并在此基础上实现贫困地区的精准扶贫以及中国文化的国际传播。</p>\n<hr>\n<h2>玉伯</h2>\n<p><img src=\"https://gw.alipayobjects.com/mdn/rms_4b03c4/afts/img/A*woPfS5zKt4wAAAAAAAAAAABkARQnAQ\" alt=\"玉伯\"></p>\n<p>提起玉伯，大家一定很熟悉啦！他是蚂蚁金服 体验技术部负责人，曾数次引用并践行乔布斯名言「设计不止于好看，更关乎好用」，率先做起了蚂蚁金服中后台「冰山之下的体验」。</p>\n<p>在第一届 SEE Conf 上，玉伯讲了「体验云」的故事，介绍了什么是「体验科技」——技术与设计的融合，服务与用户的链接，以及重点介绍体验云可以带给用户什么服务。\n在第二届 SEE Conf 上，玉伯发表了「体验科技与好的社会」主题致辞，表达了希望通过体验从业者的发展、体验的普惠与创新，让社会变得更好的愿景。</p>\n<p>本届 SEE Conf, 玉伯又将围绕「<strong>体验科技</strong>」带来什么样的分享，让我们拭目以待！</p>\n<hr>\n<h1>前沿技术</h1>\n<h2>Ant Design</h2>\n<p>Ant Design 4.0 的 slogan 太讨喜了：创造快乐工作！</p>\n<p>随着 Ant Design 的不断成长，它不可避免遇到传承和发展的问题，所以亟需建立一套核心价值体系，去总结 Ant Design 过往的基因和内核，并指引一代又一代的 Ant Designers 去进化、去创造一个有生命力的设计体系。</p>\n<p>本次 SEE Conf, 蚂蚁金服 高级体验设计专家 林外 和 高级创意设计师 线丝 将全面介绍 Ant Design 在过去两年的积累和思考，总结成设计价值观、设计资产、设计策略等多个部分，协助企业级设计者创造全新的工作体验。</p>\n<p>此外，作为 GitHub 上顶尖的开源项目，Ant Design 在本次 SEE Conf 上设置了独具特色的展区，现场还有贴纸、徽章、帆布袋等礼品相送，答应我一定要来玩！</p>\n<hr>\n<p>*前端界的明星，CNode 的大本营——Node.js 当然也有姓名！本次共有两个 Node.js 相关主题。 *</p>\n<h2>Egg &amp;&amp; Serverless For Frontend</h2>\n<p>蚂蚁金服高级前端专家、Egg.js 核心开发者天猪（<a href=\"https://github.com/atian25\">@atian25</a>）将与我们一起探索下一代 Node.js 研发模式。</p>\n<p>五年前，阿里巴巴的前端吹响了前后端分层的号角，Backend For Frontend 的概念逐渐深入人心，然而在过去几年里，社区的实践两极分化严重，大公司和创业公司如火如荼，中型公司却举步维艰。为什么需要 BFF？如何落地 BFF？ BFF 有什么缺点？最近蚂蚁正在实践的 Serverless For Frontend 致力于为前端开发者带来高效的、无感的服务端能力，它和 BFF 有什么区别？如何解决 BFF 带来的额外的学习和运维成本问题？</p>\n<p>以上所有问题，天猪都将为我们一一解答！</p>\n<h2>语雀背后技术的探究</h2>\n<p>语雀是蚂蚁金服推出的云端知识库，它不仅提供了功能强大的富文本编辑器，还提供了体系化的知识协同与管理能力，号称「<strong>西湖区最大的 Node.js 应用</strong>」。</p>\n<p>在语雀的背后，工程师们采用 JavaScript 全栈技术从零开始一步一步将语雀打造成一个成熟的商业级应用。</p>\n<p>这次分享，语雀的技术负责人、蚂蚁金服高级前端技术专家 不四（<a href=\"https://github.com/dead-horse\">@dead-horse</a>）将为我们分析语雀的技术架构发展过程，探究如何使用 JavaScript 全栈技术打造商业级应用。</p>\n<hr>\n<h2>Remax - Reat + 小程序的新探索</h2>\n<p>许多团队都在尝试使用 React 开发小程序，但目前社区里大都是使用静态编译的方式把类似 React 语法的代码转换到小程序代码。而蚂蚁金服高级前端工程师 边柳 的团队另辟蹊径，使用另外一个角度，打破小程序静态模板的限制，将 React 运行到小程序环境里，把完整的 React 开发体验带到小程序的开发中，\b打通小程序跟 React 的生态。</p>\n<hr>\n<h2>云凤蝶可视化建站 - 下一代智能研发模式</h2>\n<p>从古老的桌面软件领域的 WPF、JavaFX, 到移动端与时俱进的 SwiftUI, 再到 OutSystems、Mendix 等一众新兴 hpaPaaS. 长久以来，许多产品都在尝试通过可视化搭建的手段去降低 GUI 应用的研发门槛和提高生产效率。</p>\n<p><strong>云凤蝶</strong>作为蚂蚁内部的标准化 Web 中后台产品快速研发平台，在探索可视化搭建的路上有哪些突破与思考？本次，蚂蚁金服高级前端工程师 <strong>江木</strong> 将全面介绍云凤蝶可视化搭建的核心原理与技术架构， 并分享如何基于可视化搭建的底盘去探索下一代智能研发模式。</p>\n<hr>\n<h2>AntV - 可视化图表</h2>\n<p>AntV 是蚂蚁金服全新一代数据可视化解决方案，致力于提供一套简单方便、专业可靠、无限可能的数据可视化最佳实践。</p>\n<p>蚂蚁金服高级前端工程师，AntV 核心贡献者 逍为 的团队在开发 DeepInsight 数据洞察分析平台的时候，经历了大量用户吐槽可视化图表体验问题。后来，他们决定将可视化换成自研的 AntV, 精雕细琢，一步一步的打磨可视化图表的体验，并提出新目标、新架构、新产品来达成这一目标；在这个过程中产生的所有体验优化成果，都将在 G2Plot 这个开源产品中一览无遗。</p>\n<p>数据和体验如果结合到一起，能有什么新奇的玩法呢？来 SEE Conf 的 AntV 展区看一看，你绝对会大呼超赞！</p>\n<hr>\n<p>*近些年来计算机图形技术一直是国内外重点研究的方向，游戏、电影等领域在这方面已经发展得比较成熟，但  Web 端的图形技术才刚刚起步。 *\n*随着 5G 时代的到来，用户对互联网产品可视化、游戏化的要求越来越高，拥有传统前端技术栈的工程师如何从容应对更加复杂的 3D 动画、游戏等新的开发环境，帮助业务获得更高的增值呢？ *</p>\n<h2>Web 3D 互动营销</h2>\n<p>基于蚂蚁金服亿级用户的金融平台，蚂蚁金服的前端开发专家 烧鹅 团队从零到一开始了 3D 引擎的研发，并结合美术流程和蚂蚁金服的前端研发环境，探索出一条高效低成本的在线工作流，不仅满足了互动营销业务场景的需求，而且为工业产品展示、数据可视化等业务场景提供可靠的渲染能力。</p>\n<h2>智能可视化体系 AVA</h2>\n<p>数据可视化在体验科技中扮演着重要角色。但是对于设计和开发来说，仍然存在着学习成本高、图表类型选择有误等问题。智能可视化技术如何帮助我们解决这些问题？是否会颠覆可视化生产和使用的方式？蚂蚁金服体验科技的智能可视化体系 AVA 将为你解答这些问题。</p>\n<hr>\n<h2>幻鹦数字驾驶舱 - 曾做过国务院大屏的项目</h2>\n<p>幻鹦数字驾驶舱是新一代的数字指挥系统，以宏大场景的渲染能力与艺术化的表现力，结合多种控制交互方式，创造出令人惊叹的沉浸式体验，用以辅助管理者进行日常决策。</p>\n<p>凭借丰富的项目实战经验沉淀，蚂蚁金服图形与艺术实验室推出了幻鹦中台 1.0，以艺术化的启发，定义数字驾驶舱，并向前探索体验科技的未来。</p>\n<p>该主题将正式发布幻鹦中台 1.0，介绍数字驾驶舱的定义以及其如何成为社会数字化升级的牵引力，并给出市场，赋能和生态三位一体的解决方案。同时正式成立生态联盟，借助生态的力量共创未来。</p>\n<hr>\n<h1>探索用户体验与工程实践</h1>\n<p><img src=\"https://gw.alipayobjects.com/mdn/rms_4b03c4/afts/img/A*qGbdTLqLTxEAAAAAAAAAAABkARQnAQ\" alt=\"workshop\"></p>\n<p>SEE Conf 最令人期待的，除了各式分享之外，还有有趣好玩的 <strong>Workshop</strong>!</p>\n<p>今天，数据可视化已无处不在。如果你需要可视化你的工作成果、用数据驱动的方式进行沟通，或者你想读懂可视化作品中的玄机，那么此次工作坊就是为你准备的。此次工作坊围绕数据、图表展示如何用故事化的设计思维与方法进行可视化的体验设计。同时提供真实应用场景练习如何去探析数据背后的洞察。在这个工作坊，你将得到图表决策模型、可视化通用设计方法、分析模型，以及数据可视化设计指南。</p>\n<pre class=\"prettyprint\"><code>注：工作坊人数有限，将通过现场规则进行抽取。\n</code></pre><hr>\n<h1>直播预约</h1>\n<p>看完上面的介绍，你是不是迫不及待想参加这一届的 SEE Conf, 体验美好的科技，玩转可视化工坊呢？</p>\n<p>嘻嘻 心动不如赶快行动～</p>\n<p>大会贴心地为大家准备了现场直播～</p>\n<p>设计师朋友们可以在「美啊」上预约：</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2019/12/17/16f13ccfdb8a529c?w=193&amp;h=193&amp;f=png&amp;s=2791\" alt=\"美啊\"></p>\n<p>工程师朋友们可以在「优酷」上预约：</p>\n<p><img src=\"https://user-gold-cdn.xitu.io/2019/12/17/16f13cd142a677a9?w=191&amp;h=190&amp;f=png&amp;s=3346\" alt=\"优酷\"></p>\n<p>B 站粉丝可以在「Bilibili」上预约：\n<img src=\"//static.cnodejs.org/FrRMe2Y6UcQnYUZlPgANabGBz-FS\" alt=\"bilibili\"></p>\n<p>完成预约后，记得准时观看直播喔！</p>\n<h1>附录</h1>\n<ol>\n<li>\n<p>请详细阅读<a href=\"https://www.yuque.com/docs/share/f859f99b-4aa6-4f40-a926-dab2b67c8352?#\">参会指南</a>，提前了解大会相关信息哟～</p>\n</li>\n<li>\n<p>上<a href=\"https://www.zhihu.com/question/363807174\">知乎</a>回答问题有机会获取小礼品和下届门票喔！</p>\n</li>\n</ol>\n</div>",
            "title": "【倒计时 1 天】何人可、玉伯、Ant Design 与你相约 SEE Conf",
            "last_reply_at": "2020-01-03T09:27:38.752Z",
            "good": false,
            "top": true,
            "reply_count": 8,
            "visit_count": 3078,
            "create_at": "2019-12-30T14:28:34.972Z",
            "author": {
                "loginname": "jothy1023",
                "avatar_url": "https://avatars2.githubusercontent.com/u/14975630?v=4&s=120"
            }
        },
        {
            "id": "5dfc8d180696c446bf64f5d5",
            "author_id": "5dfc8b6fba8f6d46c4ede671",
            "tab": "share",
            "content": "<div class=\"markdown-text\"><p><a href=\"http://hdxu.cn/JH9N4\">【1封新邀请】5大主题干货满满 ECUG For Future技术盛宴等你参加！</a></p>\n<p><img src=\"//static.cnodejs.org/FkzG1Age2nEK4CCpzdfOZYSddqg5\" alt=\"长图-活动行（12.19）1M.jpg\"></p>\n<p>Q：主办方是否提供发票？\nA：如需开发票，活动结束后添加工作人员微信（ID：qiniuguanfang），会务组核对无误后，将会在2周内统一安排发放，如遇节假日顺延。</p>\n<p>Q：是否有交流群？如何加入？\nA：成功报名活动后，现场扫码加入现场交流群。</p>\n<p>Q：活动是否含餐？\nA：签到处会统一发放当天午餐券，凭餐券就餐。（就餐处距离活动地点50米）</p>\n<p>Q：如何签到？\nA：活动当天，您需要凭活动行发给您购票的参会二维码，到现场签到处签。如二维码遗失，也可以通过“手机号”签到。</p>\n<p>Q：参会人员座位是否有预留？现场是否需要对号入座？\nA：靠前第一排会给讲师预留座位，观众票座位不对号入座，不预留座位。</p>\n</div>",
            "title": "【1封新邀请】5大主题干货满满 ECUG For Future技术盛宴等你参加！",
            "last_reply_at": "2019-12-25T14:24:01.372Z",
            "good": false,
            "top": true,
            "reply_count": 2,
            "visit_count": 4322,
            "create_at": "2019-12-20T08:58:00.656Z",
            "author": {
                "loginname": "zhangcheng-RunRun",
                "avatar_url": "https://avatars3.githubusercontent.com/u/59083067?v=4&s=120"
            }
        },
        {
            "id": "5e0c53b801c0915a9d9bd697",
            "author_id": "56276af03f017c2b49b41575",
            "tab": "ask",
            "content": "<div class=\"markdown-text\"><p>项目使用了 nuxt 框架，但是 QA 反馈性能很差（通过压力测试）</p>\n<p>我本地分别用了 next 和 nuxt 跑了压力测试，采用 helloworld 级别的最小仓库，next 的压测结果吞吐量是 nuxt 的五倍左右</p>\n<p>我想问下在用 nuxt 的兄弟，nuxt 性能怎么样？怎么优化呢？</p>\n</div>",
            "title": "nuxt 框架是不是性能很差？怎么优化呢",
            "last_reply_at": "2020-01-07T08:45:58.717Z",
            "good": false,
            "top": false,
            "reply_count": 32,
            "visit_count": 1375,
            "create_at": "2020-01-01T08:09:28.464Z",
            "author": {
                "loginname": "hanzichi",
                "avatar_url": "https://avatars3.githubusercontent.com/u/10890665?v=4&s=120"
            }
        },
        {
            "id": "5d6de312a7474a231a5886bd",
            "author_id": "5c18354b7ec239239ff57c7f",
            "tab": "share",
            "content": "<div class=\"markdown-text\"><p>去年和朋友一起翻译的《架构师修炼之道》最近出版了。水平有限，请大家多多指正。荣誉是大家的，有错误都算我的！</p>\n<p>这本书是写给想当架构师的童鞋看的，全书分两个部分，第一部分主要讲程序猿要掌握哪些思维方式和工作方式才能成为架构师，以及架构设计的案例。第二部分归纳若干带领团队设计架构的方法和技巧。国外读者对这本书评价很高，原书读起来也很流畅，但愿我们翻译没拖后腿。</p>\n<p>短片，一分钟了解《架构师修炼之道》讲什么：<a href=\"https://weibo.com/tv/v/Ijn5ucvek?fid=1034:4446167681925145\">https://weibo.com/tv/v/Ijn5ucvek?fid=1034:4446167681925145</a></p>\n<p>闲话少说，这里有<strong>38页试读</strong>：<a href=\"https://pan.baidu.com/s/1pk50WEv9XqjHkLtH7iXxgg\">https://pan.baidu.com/s/1pk50WEv9XqjHkLtH7iXxgg</a></p>\n<p>希望这本书对大家升职加薪脱单有帮助:)</p>\n<p><strong>天猫有售</strong>：<a href=\"https://detail.tmall.com/item.htm?spm=a230r.1.14.15.1cea1774yUneie&amp;id=601144871555\">https://detail.tmall.com/item.htm?spm=a230r.1.14.15.1cea1774yUneie&amp;id=601144871555</a></p>\n<p><img src=\"//static.cnodejs.org/Fi-NjeCWw2xxioeMNBpnWVzhyDYO\" alt=\"QQ图片20190830144122.jpg\"></p>\n</div>",
            "title": "新书《架构师修炼之道》试读  + 一分钟介绍短片",
            "last_reply_at": "2020-01-07T05:30:20.224Z",
            "good": false,
            "top": false,
            "reply_count": 13,
            "visit_count": 7304,
            "create_at": "2019-09-03T03:50:42.832Z",
            "author": {
                "loginname": "sean-xu",
                "avatar_url": "https://avatars0.githubusercontent.com/u/430849?v=4&s=120"
            }
        },
        {
            "id": "5e132b0d4bea432607fcd22e",
            "author_id": "5b39abe057137f22415c51eb",
            "tab": "ask",
            "content": "<div class=\"markdown-text\"><p>这个错误重试的包有人用过么\n官网的例子有点简单哟</p>\n</div>",
            "title": "async-retry 有人用过这个npm包么  我看的一脸懵逼，",
            "last_reply_at": "2020-01-07T05:29:24.784Z",
            "good": false,
            "top": false,
            "reply_count": 4,
            "visit_count": 410,
            "create_at": "2020-01-06T12:41:49.530Z",
            "author": {
                "loginname": "nlbydcg",
                "avatar_url": "https://avatars2.githubusercontent.com/u/40027034?v=4&s=120"
            }
        },
        {
            "id": "5e12e5ce81adfe260207a081",
            "author_id": "5e104d5581adfe2602079d4a",
            "tab": "ask",
            "content": "<div class=\"markdown-text\"><p>单点登录使用 jwt + redis；\n踢下线集成socket；\n至于页面和接口的鉴权还是比较老套的解决方案，创建每个用户的权限树存储到mongo 或redis中，然后后台通过路由和权限树的比对作出判断。</p>\n</div>",
            "title": "【eggjs】-我想实现单点登录功能，以及通知用户踢下线功能,还想进一步对接口和页面的访问权限进行限制，目前有大体的解决思路，还有什么其他解决方案吗？",
            "last_reply_at": "2020-01-07T04:01:41.572Z",
            "good": false,
            "top": false,
            "reply_count": 2,
            "visit_count": 268,
            "create_at": "2020-01-06T07:46:22.964Z",
            "author": {
                "loginname": "feiyuchuixue",
                "avatar_url": "https://avatars3.githubusercontent.com/u/18590353?v=4&s=120"
            }
        },
        {
            "id": "5dfc7277ba8f6d46c4ede5c2",
            "author_id": "5cf726571fe902120f31c3a5",
            "tab": "ask",
            "content": "<div class=\"markdown-text\"><p>最近在学习nodeJS，再往大前端方向升级自己，但是自己的本是8年的老本已经无法满足自己的开发需求，想更换一台，求大神推荐</p>\n</div>",
            "title": "求大神推荐大前端开发方向的适合笔记本，谢谢",
            "last_reply_at": "2020-01-07T03:51:32.035Z",
            "good": false,
            "top": false,
            "reply_count": 31,
            "visit_count": 2091,
            "create_at": "2019-12-20T07:04:23.440Z",
            "author": {
                "loginname": "SquabbyZ",
                "avatar_url": "https://avatars0.githubusercontent.com/u/43177939?v=4&s=120"
            }
        },
        {
            "id": "5e0c2fd301c0915a9d9bd5f4",
            "author_id": "5a9783798d6e16e56bb80a34",
            "tab": "share",
            "content": "<div class=\"markdown-text\"><h1><a href=\"https://github.com/OXOYO/2020-1024-996\">2020 = 1024 + 996</a></h1>\n<p>Happy New Year!</p>\n</div>",
            "title": "Happy New Year!",
            "last_reply_at": "2020-01-07T03:50:31.285Z",
            "good": false,
            "top": false,
            "reply_count": 5,
            "visit_count": 850,
            "create_at": "2020-01-01T05:36:19.123Z",
            "author": {
                "loginname": "OXOYO",
                "avatar_url": "https://avatars3.githubusercontent.com/u/5074207?v=4&s=120"
            }
        },
        {
            "id": "5e13249e4bea432607fcd202",
            "author_id": "5e13183c4bea432607fcd1d9",
            "tab": "share",
            "content": "<div class=\"markdown-text\"><p>人不狠不敢多比比  就直接上代码了！\n<strong><em>示例代码如下</em></strong></p>\n<p>req = (ms)=&gt;{\nreturn new Promise((resolve,reject)=&gt;{\n\tconsole.log(‘ff’)\nsetTimeout(()=&gt;{\nconsole.log(‘dd’)\nresolve(‘pp’)\n},ms)\n})\n}\naa = async ()=&gt;{\nconsole.log(‘aa’)\nawait req(5000).then(data=&gt;{console.log(data)})\nconsole.log(‘cc’)\n}\nbb=()=&gt;{\nconsole.log(‘bb’)\n}\naa();\n//aa();\nbb();</p>\n<p><strong>注解</strong>\n<strong>程序开始执行 =&gt;</strong>\n<strong>执行a()=&gt;</strong>\n<strong>打印aa=&gt;</strong>\n<strong>执行req()=&gt;</strong>\n**打印ff =&gt; **    //前面都是按代码顺序同步执行\n<strong>settimeou进入timer队列 =&gt;</strong>  // settimeout 为异步操作     <a href=\"https://cnodejs.org/topic/5a9108d78d6e16e56bb80882\">社区内大佬写的eventloop详解</a>\n**promise进入pennding状态=&gt; **  //promise 共有三个状态   一旦发生转换是不可改变的  <a href=\"https://es6.ruanyifeng.com/#docs/promise#Promise-%E7%9A%84%E5%90%AB%E4%B9%89\">阮一峰老师写的es6入门里有详细介绍</a>\n**await 执行让出线程控制权=&gt; **  // async函数为Generator+co模块的语法糖   同时这里引入了协程的概念 Generator只是函数的容器  并不执行任何代码 yeild 和awiat\n可以人为控制代码执行的时间点 （原话就是让出线程控制权 ）   这里的协程应该是不会创建新的线程 所有的代码还是在主线程上执行的  不知理解是否正确，毕竟大家口口相传js    就是单线程 ：）\n<strong>执行b()=&gt;</strong>\n<strong>打印bb=&gt;</strong>\n<strong>js主线程为空不执行任何代码  等待异步结果返回=&gt;</strong>   当主线程空闲的时候   才会执行eventloop各个队列返回的回调函数   <a href=\"https://www.jianshu.com/p/d0eb7cf23120\">这里引入macrotask 和 microtask的概念 详细请看这里</a>\n<strong>时间到了 settimeout执行=&gt;</strong>\n<strong>打印dd=&gt;</strong>\n<strong>resolve()执行=&gt;</strong>\n**promise变为成功状态=&gt;  **\n**.then()执行打印pp=&gt; **  // 这里执行完回调就会继续按顺序执行  所以才会感觉像同步的写法  如果后面继续执行遇到await依旧是 先返回 去执行别的代码\n<strong>最后打印cc</strong>\n<strong>程序结束</strong></p>\n<p>以上是个人对异步暂时的理解  欢迎大佬们指指点点#177</p>\n<pre class=\"prettyprint\"><code>         第一次发帖希望引起大佬注意：）</code></pre></div>",
            "title": "手撕js异步#24",
            "last_reply_at": "2020-01-07T03:48:24.660Z",
            "good": false,
            "top": false,
            "reply_count": 2,
            "visit_count": 328,
            "create_at": "2020-01-06T12:14:22.395Z",
            "author": {
                "loginname": "zhsonga",
                "avatar_url": "https://avatars1.githubusercontent.com/u/18735806?v=4&s=120"
            }
        },
        {
            "id": "5e0c4d41f628e05aa2172cf4",
            "author_id": "5709c7fb12def0933c43ab8c",
            "tab": "ask",
            "content": "<div class=\"markdown-text\"><p>本人前端，最近在写一个后台管理系统，没有后端经验特来请教一下，场景是这样的：\n两个人同时进页面获取了某条记录的详情，此时是一样的，然后一个人修改了这条数据，如订单状态，然后不希望第二个人再次更改了。代码需要怎么写？\n是每次update之前先select出来判断订单状态么，还是要表加锁之类的？</p>\n</div>",
            "title": "并发操作同一条数据记录的最佳实践是怎样的？",
            "last_reply_at": "2020-01-07T03:44:20.516Z",
            "good": false,
            "top": false,
            "reply_count": 6,
            "visit_count": 773,
            "create_at": "2020-01-01T07:41:53.083Z",
            "author": {
                "loginname": "Alexis374",
                "avatar_url": "https://avatars3.githubusercontent.com/u/2499504?v=4&s=120"
            }
        },
        {
            "id": "5e13fd8c81adfe260207a2c3",
            "author_id": "5e13f75d4bea432607fcd359",
            "tab": "ask",
            "content": "<div class=\"markdown-text\"><p>很纠结</p>\n</div>",
            "title": "node.js如何与vue结合",
            "last_reply_at": "2020-01-07T03:39:56.273Z",
            "good": false,
            "top": false,
            "reply_count": 0,
            "visit_count": 195,
            "create_at": "2020-01-07T03:39:56.273Z",
            "author": {
                "loginname": "kongkgng",
                "avatar_url": "https://avatars1.githubusercontent.com/u/58409067?v=4&s=120"
            }
        },
        {
            "id": "5e0e24594bea432607fcca26",
            "author_id": "5a7a5d505321b5396004ec1e",
            "tab": "share",
            "content": "<div class=\"markdown-text\"><p>发布时间以首个版本发布（0.x）为准。</p>\n<table>\n<thead>\n<tr>\n<th>排名</th>\n<th>框架名称</th>\n<th>star数</th>\n<th>语言</th>\n<th>首个版本发布时间</th>\n<th>github地址</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>express</td>\n<td>46.8k</td>\n<td>js</td>\n<td>2010年1月</td>\n<td><a href=\"https://github.com/expressjs/express\">https://github.com/expressjs/express</a></td>\n<td>star和下载量最高的老牌框架</td>\n</tr>\n<tr>\n<td>2</td>\n<td>koa</td>\n<td>28.2k</td>\n<td>js</td>\n<td>2013年11月</td>\n<td><a href=\"https://github.com/koajs/koa\">https://github.com/koajs/koa</a></td>\n<td></td>\n</tr>\n<tr>\n<td>3</td>\n<td>nest</td>\n<td>22.8k</td>\n<td>ts</td>\n<td>2017年11月</td>\n<td><a href=\"https://github.com/nestjs/nest\">https://github.com/nestjs/nest</a></td>\n<td>增长最快的框架</td>\n</tr>\n<tr>\n<td>4</td>\n<td>sails</td>\n<td>21.1k</td>\n<td>js</td>\n<td>2012年7月</td>\n<td><a href=\"https://github.com/balderdashy/sails\">https://github.com/balderdashy/sails</a></td>\n<td>最早的类ror框架</td>\n</tr>\n<tr>\n<td>5</td>\n<td>egg</td>\n<td>14.6k</td>\n<td>js</td>\n<td>2016年7月</td>\n<td><a href=\"https://github.com/eggjs/egg\">https://github.com/eggjs/egg</a></td>\n<td>阿里开源的node.js框架</td>\n</tr>\n<tr>\n<td>6</td>\n<td>loopback</td>\n<td>13k</td>\n<td>js/ts</td>\n<td>2013年6月</td>\n<td><a href=\"https://github.com/strongloop/loopback\">https://github.com/strongloop/loopback</a>  &amp; <a href=\"https://github.com/strongloop/loopback-next\">https://github.com/strongloop/loopback-next</a></td>\n<td></td>\n</tr>\n<tr>\n<td>7</td>\n<td>fastify</td>\n<td>13k</td>\n<td>js</td>\n<td>2016年10月</td>\n<td><a href=\"https://github.com/fastify/fastify\">https://github.com/fastify/fastify</a></td>\n<td>性能最好的node.js 框架</td>\n</tr>\n<tr>\n<td>8</td>\n<td>hapi</td>\n<td>11.9k</td>\n<td>js</td>\n<td>2012年8月</td>\n<td><a href=\"https://github.com/hapijs/hapi\">https://github.com/hapijs/hapi</a></td>\n<td></td>\n</tr>\n<tr>\n<td>9</td>\n<td>pomelo</td>\n<td>10.6k</td>\n<td>js</td>\n<td>2012年12月</td>\n<td><a href=\"https://github.com/NetEase/pomelo\">https://github.com/NetEase/pomelo</a></td>\n<td>游戏框架</td>\n</tr>\n<tr>\n<td>10</td>\n<td>node-restify</td>\n<td>9.6k</td>\n<td>js</td>\n<td>2011年5月</td>\n<td><a href=\"https://github.com/restify/node-restify\">https://github.com/restify/node-restify</a></td>\n<td></td>\n</tr>\n<tr>\n<td>11</td>\n<td>adonis</td>\n<td>7.5k</td>\n<td>ts</td>\n<td>2015年10月</td>\n<td><a href=\"https://github.com/adonisjs/adonis-framework\">https://github.com/adonisjs/adonis-framework</a></td>\n<td>类似laravel的框架</td>\n</tr>\n</tbody>\n</table>\n<p>nest.js 增长了1k 成为增长最快的框架\n上月数据查看： <a href=\"https://cnodejs.org/topic/5de4614239af564604bbfbec\">https://cnodejs.org/topic/5de4614239af564604bbfbec</a></p>\n</div>",
            "title": "node.js 后端框架star 排名（2020年1月更新） nest.js 直逼 koa",
            "last_reply_at": "2020-01-07T03:35:13.920Z",
            "good": false,
            "top": false,
            "reply_count": 1,
            "visit_count": 1046,
            "create_at": "2020-01-02T17:11:53.224Z",
            "author": {
                "loginname": "zuohuadong",
                "avatar_url": "https://avatars0.githubusercontent.com/u/11203929?v=4&s=120"
            }
        },
        {
            "id": "5e129da181adfe2602079f24",
            "author_id": "5e047384ba8f6d46c4edf47e",
            "tab": "share",
            "content": "<div class=\"markdown-text\"><p>NODE.JS开发主管</p>\n<p>工作职责：\n负责公司平台产品的基础架构的设计与实现；\n负责公司后端核心模块的设计与开发；\n负责技术攻关和创新技术引用，解决产品开发过程中的高性能，高并发和高可靠性问题； 岗位要求:\n7年以上互联网开发经验，有大规模后端服务的设计和开发方面经验，对 Unix/Linux 有深入了解；\n出色的编码能力，精通如下三种语言之一（java，nodejs，c++），尤其使用它们做过web服务；\n对后端程序性能优化有丰富经验；\n掌握Redis、Mongodb，Mysql等存储系统原理及应用；\n熟悉常用的算法，熟悉开源框架，解决问题能力强；\n对分布式计算，分布式存储的架构设计理念和动机有一定理解；\n对HTTP协议有深刻的理解，熟悉TCP/IP等网络协议； 加分项：\n参与过阅卷类产品或其它教育项目；\n参与或拥有开源项目，为开源社区贡献过代码；\n设计、开发过高并行系统.\n补充信息：</p>\n<p>薪资范围：35k以内，13薪，配期权\n目前B轮，今年已经实现盈利\n全公司总人数3000+，研发团队500+（北京郑州广州 ），其中广州研发团队70+，明年扩大一倍\n创始人是前百度云与大数据首席架构师（百度T11），产品研发成员主要来自百度、微软、亚马逊、用友等知名技术公司；</p>\n<p>有意请联系猎头顾问黄嘉怡15625161507 手机微信同号欢迎各位大神踊跃投递简历，谢谢大家关注</p>\n</div>",
            "title": "【广州天河】高薪招聘Node.js主管，可年后入职！！！",
            "last_reply_at": "2020-01-07T02:56:59.942Z",
            "good": false,
            "top": false,
            "reply_count": 2,
            "visit_count": 339,
            "create_at": "2020-01-06T02:38:25.592Z",
            "author": {
                "loginname": "Ares0128",
                "avatar_url": "https://avatars1.githubusercontent.com/u/59248851?v=4&s=120"
            }
        },
        {
            "id": "5e13f08981adfe260207a24e",
            "author_id": "5e13e97d81adfe260207a215",
            "tab": "ask",
            "content": "<div class=\"markdown-text\"><p>我们用Electron开发的桌面应用，有个需求是离线编辑，把一个文件下载到本地用系统默认的编辑器打开它，在用户修改完关闭编辑器之后，把这个文件回传给服务端，现在我不知道怎么监听用户关闭编辑器这个事件？？？</p>\n</div>",
            "title": "node监听系统进程？",
            "last_reply_at": "2020-01-07T02:52:10.153Z",
            "good": false,
            "top": false,
            "reply_count": 2,
            "visit_count": 102,
            "create_at": "2020-01-07T02:44:25.704Z",
            "author": {
                "loginname": "liubin-webFront",
                "avatar_url": "https://avatars3.githubusercontent.com/u/25955870?v=4&s=120"
            }
        },
        {
            "id": "5df3326bdf1b9a40d14c6739",
            "author_id": "58f837a3bbaf2f3f569be082",
            "tab": "ask",
            "content": "<div class=\"markdown-text\"><p>这是PC端的图：\n<img src=\"//static.cnodejs.org/Fkmts2L5Pd8pVizAD_0kaMKH4_5J\" alt=\"86931233-5df0569848f8e_articlex.png\">\n这是移动端的图（使用PC端Chrome开发工具里的模拟手机功能，但实测真机上问题同样存在）\n<img src=\"//static.cnodejs.org/FkPn1KR59teigCxZloofhc_iCBE7\" alt=\"4117899329-5df0566fa01b5_articlex.png\">\n这是真实项目中的图：（上面两张图是我把真实项目中bug之外的要素全删的结果。）\n<img src=\"//static.cnodejs.org/FtKMyIwYeqru4KmFrRVEbIzw_BZB\" alt=\"25A25E02-7006-44C5-B7BE-F924906FD303.png\"></p>\n<p>看到中间的白线条了吗？\nP.S. 项目里没用img标签，而是background-image。\n很奇怪的问题。我通过调整div的height可以在某个值时消除此线条，但设计原因我又不能调整高度。\n代码很简单，在<a href=\"https://gist.github.com/shuiRong/f3206e73bc0e4fd9aff9eb67e362193a#file-bug\">这里</a>【注意HTML里面的图片用的是Imgur的图床，因此可能翻墙才能展示。】\n这个布局是有点奇怪，可能改变布局能解决此问题。但我现在非常想知道为什么移动端会出现这个问题？怎么造成的？</p>\n<p>我做过的尝试：加背景色，会减轻白色线条影响，但仔细看，依旧是能看到白线的。\n提前谢谢大家！</p>\n</div>",
            "title": "怪异的移动端CSS问题之「神秘的白线条」",
            "last_reply_at": "2020-01-07T01:30:09.468Z",
            "good": false,
            "top": false,
            "reply_count": 14,
            "visit_count": 2088,
            "create_at": "2019-12-13T06:40:43.338Z",
            "author": {
                "loginname": "shuiRong",
                "avatar_url": "https://avatars1.githubusercontent.com/u/16076993?v=4&s=120"
            }
        },
        {
            "id": "5e119f604bea432607fcce89",
            "author_id": "5e0313f60696c446bf650050",
            "tab": "ask",
            "content": "<div class=\"markdown-text\"><p>请问：mongodb数据库，进行数据操作完毕后，需要手动断开与数据库的连接吗，还是连接池自动判断呢</p>\n</div>",
            "title": "请问：mongodb数据库，进行数据操作完毕后，需要手动断开与数据库的连接吗",
            "last_reply_at": "2020-01-06T23:25:56.614Z",
            "good": false,
            "top": false,
            "reply_count": 1,
            "visit_count": 406,
            "create_at": "2020-01-05T08:33:36.456Z",
            "author": {
                "loginname": "Limiandy",
                "avatar_url": "https://avatars2.githubusercontent.com/u/46664435?v=4&s=120"
            }
        },
        {
            "id": "5e104bd681adfe2602079d42",
            "author_id": "56fb8ede8265278d59c7e304",
            "tab": "ask",
            "content": "<div class=\"markdown-text\"><p>最近在学习socket编程，遇到tcp粘包的问题，查了资料，大致看到两种封包思路：</p>\n<ol>\n<li>一种是把body length放在header里面，先解析body length,然后再解析body.</li>\n<li>另外一种是根据特殊字符，如\\r\\n来切分\n看到说的都是这种思路，但是没有查到具体的实现方案，有谁能具体的例子学习一下吗？</li>\n</ol>\n</div>",
            "title": "node.js tcp 粘包，拆包问题",
            "last_reply_at": "2020-01-06T14:51:43.888Z",
            "good": false,
            "top": false,
            "reply_count": 3,
            "visit_count": 710,
            "create_at": "2020-01-04T08:24:54.102Z",
            "author": {
                "loginname": "JerrysShan",
                "avatar_url": "https://avatars1.githubusercontent.com/u/13977368?v=4&s=120"
            }
        },
        {
            "id": "5e12d40781adfe260207a01b",
            "author_id": "5df1fb6fc9ab2e579c215293",
            "tab": "ask",
            "content": "<div class=\"markdown-text\"><p><img src=\"//static.cnodejs.org/Fm-rJnZ7MXnMudO0or8MiwuTVtmK\" alt=\"8EC49285-24A6-43D6-B162-87E019E157EF.png\"></p>\n</div>",
            "title": "vant框架这个list我想替换成axios请求 应该怎么写。。",
            "last_reply_at": "2020-01-06T09:19:18.898Z",
            "good": false,
            "top": false,
            "reply_count": 4,
            "visit_count": 219,
            "create_at": "2020-01-06T06:30:31.725Z",
            "author": {
                "loginname": "1064656851",
                "avatar_url": "https://avatars2.githubusercontent.com/u/54178606?v=4&s=120"
            }
        },
        {
            "id": "5e1177a681adfe2602079df3",
            "author_id": "5c4ad7d1f9075c1ef713821f",
            "tab": "ask",
            "content": "<div class=\"markdown-text\"><p><a href=\"http://\"></a>最近遇到一个奇怪的问题，那位大神帮看一下：\n在一个egg项目中，router中定义了一个resources，\nrouter.js</p>\n<blockquote>\n<p>router.resources(‘admin_roles’, ‘/admin/roles’, controller.admin.roles);</p>\n</blockquote>\n<p>用form表单提交数据，在编辑数据时，使用restful默认的patch方法：method=“patch”，\napp/view/roles/edit.html</p>\n<blockquote>\n<p>&lt;form action=&quot;/admin/roles/&lt;%=list._id%&gt;&quot; method=“patch”&gt;\n\t&lt;ul&gt;\n\t\t&lt;input type=“hidden” name=&quot;_csrf&quot; value=&quot;&lt;%=csrf%&gt;&quot; /&gt;\n\t\t&lt;li&gt;角色名称: &lt;input type=“text” name=“title” value=&quot;&lt;%=list.title%&gt;&quot; /&gt;&lt;/li&gt;\n\t\t&lt;li&gt;角色描述:&lt;textarea name=“description” id=&quot;&quot; cols=“60” rows=“8”&gt;&lt;%=list.description%&gt;&lt;/textarea&gt;&lt;/li&gt;\n\t\t &lt;li&gt;&lt;input type=“submit” value=“提交” class=“btn btn-default”&gt;&lt;/li&gt;\n\t&lt;/ul&gt;\n&lt;/form&gt;</p>\n</blockquote>\n<p>但提交后却变为get请求，返回404</p>\n<blockquote>\n<p>Request URL: <a href=\"http://localhost:7001/admin/roles/5e0d52943855f76d3c88ddc1?_csrf=LpHNef1e-H5YPfmaRq4Up6vxuo8djj8YR0UQ&amp;title=aaa3333&amp;description=333333\">http://localhost:7001/admin/roles/5e0d52943855f76d3c88ddc1?_csrf=LpHNef1e-H5YPfmaRq4Up6vxuo8djj8YR0UQ&amp;title=aaa3333&amp;description=333333</a>\nRequest Method: GET\nStatus Code: 404 Not Found\nRemote Address: [::1]:7001\nReferrer Policy: no-referrer-when-downgrade</p>\n</blockquote>\n<p>不知是哪里出了问题？\n谢谢！</p>\n</div>",
            "title": "Egg.js项目中resources的patch方法无法生效",
            "last_reply_at": "2020-01-06T06:15:46.427Z",
            "good": false,
            "top": false,
            "reply_count": 5,
            "visit_count": 293,
            "create_at": "2020-01-05T05:44:06.116Z",
            "author": {
                "loginname": "yangjindong",
                "avatar_url": "https://avatars2.githubusercontent.com/u/2887?v=4&s=120"
            }
        }
    ]
}